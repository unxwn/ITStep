using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;

namespace Lab4
{
    internal class Program
    {
        static List<double> partialSums = new List<double>();
        static List<int> partialCounts = new List<int>();
        static int totalOperations = 0;
        static bool isCompleted = false;
        static readonly int CHUNK = 5;

        static void Main(string[] args)
        {
            double[] doubleNums = { 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1, 1.2, 3.4, 11.5, 99.99, -10.2, 5.5, 7.7, 8.8, 9.9, 10.1 };
            Console.WriteLine($"Original array: {string.Join(" | ", doubleNums)}");

            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            double sum = doubleNums.Sum();
            int length = doubleNums.Length;
            double avg = sum / length;
            stopwatch.Stop();

            Console.WriteLine($"!!!!!!!!!!!!!!!!!!!!!!avg: {avg} time: {stopwatch.Elapsed.TotalMilliseconds}");

            stopwatch.Start();
            CalculateAverageParallel(doubleNums);

            while (!isCompleted)
            {
                Thread.Sleep(10);
            }

            double totalSum = partialSums.Sum();
            int totalCount = partialCounts.Sum();
            double finalAverage = totalSum / totalCount;
            stopwatch.Stop();
            Console.WriteLine($"Final average: {finalAverage}");
            Console.WriteLine($"async time: {stopwatch.Elapsed.TotalMilliseconds}");

        }

        static void CalculateAverageParallel(double[] array)
        {
            if (array.Length <= CHUNK)
            {
                totalOperations++;
                ThreadPool.QueueUserWorkItem(CalculatePartialAverage, array);
            }
            else
            {
                int mid = array.Length / 2;
                double[] leftHalf = array.Take(mid).ToArray();
                double[] rightHalf = array.Skip(mid).ToArray();

                CalculateAverageParallel(leftHalf);
                CalculateAverageParallel(rightHalf);
            }
        }

        static void CalculatePartialAverage(object state)
        {
            double[] array = (double[])state;
            double sum = array.Sum();
            int count = array.Length;

            double localSums =  sum;
            int localCounts = count;

            partialSums.Add(localSums);
            partialCounts.Add(localCounts);

            Console.WriteLine($"Calculated average for {count} elements ({string.Join(" | ", array)}): {sum / count}");

            if (--totalOperations == 0)
            {
                isCompleted = true;
            }
        }
    }
}